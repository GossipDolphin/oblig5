{"version":3,"sources":["App.js","index.js"],"names":["todoCardList","completedTodoCardList","App","className","NavbarComp","MainComp","AddTodoButtonComp","id","onClick","openCreateTodoForm","CreateTodoComp","CreateTodoHeaderComp","closeCreateTodoForm","CardForm","inputHandler","event","target","name","text","value","setState","textLength","length","nam","val","state","title","author","description","handleChange","bind","handleSubmit","setTodoCardList","concat","TodoCard","this","Date","now","toLocaleDateString","preventDefault","onSubmit","onChange","placeholder","required","maxLength","type","React","Component","OverlayComp","document","getElementById","style","visibility","dateCreated","uuidv4","window","onload","quantity","i","push","generateDummyCards","generateCompletedDummyCards","GenerateCards","useState","list","setList","map","card","key","completedCardSetList","deleteCard","completedCard","filter","item","GenerateCompletedCardAndSearch","listToMap","searchTerm","setSearchTerm","searchResults","setSearchResults","useEffect","results","toLowerCase","includes","htmlFor","j","temp","rootElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.835e91fa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nlet todoCardList = [];\r\nlet completedTodoCardList = [];\r\n\r\nexport default function App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <NavbarComp />\r\n            <MainComp />\r\n            <CreateTodoComp />\r\n            <OverlayComp />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst NavbarComp = () => {\r\n    return (\r\n        <header className=\"topHeader\">\r\n            <h2 className=\"hiofTopBanner\">HIOF</h2>\r\n            <h2 className=\"userTopBanner\">User user</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst MainComp = () => {\r\n    return (\r\n        <main>\r\n            <AddTodoButtonComp />\r\n            <GenerateCards />\r\n            <GenerateCompletedCardAndSearch />\r\n        </main>\r\n    )\r\n}\r\n\r\nconst AddTodoButtonComp = () => {\r\n    return (\r\n        <section className=\"todoButtonSection\" id=\"todoButtonSectionID\">\r\n            <p className=\"todoButtonText\" onClick={openCreateTodoForm}>+ Todo</p>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst CreateTodoComp = () => {\r\n    return (\r\n        <section className=\"createTodoSection\" id=\"createTodoSectionID\">\r\n            <CreateTodoHeaderComp />\r\n            <section className=\"createTodoMainSection\">\r\n                <CardForm />\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst CreateTodoHeaderComp = () => {\r\n    return (\r\n        <section className=\"createTodoHeaderSection\">\r\n            <p>New Todo</p>\r\n            <p id=\"closeFormCrossID\" onClick={closeCreateTodoForm}>&#10005;</p>\r\n        </section>\r\n    )\r\n}\r\n\r\nclass CardForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { title: '' };\r\n        this.state = { author: '' };\r\n        this.state = { description: '' };\r\n        this.state = { textLength: 0 };\r\n\r\n        this.handleChange = this.inputHandler.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    inputHandler = (event) => {\r\n        if (event.target.name === \"description\") {\r\n            const text = event.target.value;\r\n            this.setState({ textLength: text.length }); //bruker state til å ha kontroll på antall bokstaver\r\n        }\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({ [nam]: val });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        setTodoCardList(todoCardList.concat(new TodoCard(\r\n            this.state.title,\r\n            this.state.description,\r\n            this.state.author,\r\n            new Date(Date.now()).toLocaleDateString())))\r\n        event.preventDefault();\r\n        closeCreateTodoForm();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} id=\"todoNoteFormID\">\r\n                <p>Title</p>\r\n                <textarea\r\n                    name=\"title\"\r\n                    value={this.state.title}\r\n                    onChange={this.inputHandler}\r\n                    placeholder=\"Todo title\"\r\n                    required id=\"todoTitleTextAreaID\">\r\n                </textarea>\r\n                <p id=\"formDescriptionHeaderID\">Description length is: {this.state.textLength} of max 50</p>\r\n                <textarea\r\n                    name=\"description\"\r\n                    value={this.state.description}\r\n                    onChange={this.inputHandler}\r\n                    maxLength=\"50\"\r\n                    required placeholder=\"Lorem ipsum dollare sitane\"\r\n                    id=\"descriptionTextAreaID\"></textarea>\r\n                <p>Author</p>\r\n                <textarea\r\n                    name=\"author\"\r\n                    value={this.state.author}\r\n                    onChange={this.inputHandler}\r\n                    placeholder=\"Author author\"\r\n                    required id=\"authorTextAreaID\"></textarea>\r\n                <button type=\"submit\" value=\"Submit\" id=\"createNoteID\">Create</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst OverlayComp = () => {\r\n    return (\r\n        <section className=\"overLay\" id=\"overLayID\"></section>\r\n    )\r\n}\r\n\r\nfunction openCreateTodoForm() {\r\n    document.getElementById(\"createTodoSectionID\").style.visibility = 'visible';\r\n    document.getElementById(\"overLayID\").style.visibility = 'visible';\r\n}\r\n\r\nfunction closeCreateTodoForm() {\r\n    document.getElementById(\"createTodoSectionID\").style.visibility = 'hidden';\r\n    document.getElementById(\"overLayID\").style.visibility = 'hidden';\r\n}\r\n\r\nclass TodoCard {\r\n    constructor(title, description, author, dateCreated) {\r\n        this.id = uuidv4();\r\n        this.title = title;\r\n        this.description = description;\r\n        this.author = author;\r\n        this.dateCreated = dateCreated;\r\n    }\r\n}\r\nwindow.onload = generateDummyCards(3) + generateCompletedDummyCards(3);\r\n\r\nfunction generateDummyCards(quantity) {\r\n    for (let i = 0; i < quantity; i++) {\r\n        todoCardList.push(new TodoCard(\"title \" + i, \"description \" + i, \"author\", new Date(Date.now()).toLocaleDateString()))\r\n    }\r\n}\r\nfunction setTodoCardList() { }\r\nconst GenerateCards = () => {\r\n    const [list, setList] = useState(todoCardList); // eslint-disable-next-line\r\n    setTodoCardList = setList;\r\n    todoCardList = list;\r\n    return (\r\n        <section className=\"todoNotesSection\" id=\"todoNotesSectionID\">\r\n            {list.map((card) => (\r\n                <article key={card.id} className=\"noteArticle\">\r\n                    <h2>{card.title}</h2>\r\n                    <p>{card.description}</p>\r\n                    <button className=\"btnComplete\" onClick={() => completedCard(card, card.id, list, setList)}>Complete</button>\r\n                    <button className=\"btnDelete\" onClick={() => deleteCard(card.id, list, setList)}>Delete</button>\r\n                </article>\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n\r\nfunction deleteCard(id, list, setList) {\r\n    const newList = list.filter((item) => item.id !== id);\r\n    setList(newList);\r\n}\r\n\r\nfunction completedCard(card, id, list, setList) {\r\n    completedCardSetList(completedTodoCardList.concat(card));\r\n    deleteCard(id, list, setList);\r\n}\r\n\r\nfunction generateCompletedDummyCards(quantity) {\r\n    for (let i = 0; i < quantity; i++) {\r\n        completedTodoCardList.push(new TodoCard(\"titleCompleted \" + i, \"descriptionCompleted \" + i, \"author\", \"9/\" + (4 + i) + \"/2020\"))\r\n    }\r\n}\r\n\r\nfunction completedCardSetList() { };\r\nconst GenerateCompletedCardAndSearch = () => {\r\n    const [list, setList] = useState(completedTodoCardList); // eslint-disable-next-line\r\n    completedCardSetList = setList;\r\n    completedTodoCardList = list;\r\n\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n    const handleChange = event => {\r\n        setSearchTerm(event.target.value);\r\n    };\r\n    React.useEffect(() => {\r\n        const results = completedTodoCardList.filter(completedTodoCardList =>\r\n            completedTodoCardList.title.toLowerCase().includes(searchTerm)\r\n        );\r\n        setSearchResults(results);\r\n    }, [searchTerm]);\r\n    let listToMap;\r\n    if (searchTerm.length > 0) {\r\n        listToMap = searchResults;\r\n    }\r\n    else {\r\n        listToMap = list;\r\n    }\r\n    function toggleSortByDate(event) {\r\n        for (var i = 0; i < listToMap.length; i++) {\r\n            for (var j = 0; j < listToMap.length; j++) {\r\n                if (listToMap[j].dateCreated < listToMap[i].dateCreated) {\r\n                    var temp = listToMap[i];\r\n                    listToMap[i] = listToMap[j];\r\n                    listToMap[j] = temp;\r\n                }\r\n            }\r\n        }\r\n        event=null;\r\n        setSearchResults(listToMap);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"completedTodosSection\">\r\n                <h2>Completed todos</h2>\r\n                <section className=\"dateCheckboxSection\">\r\n                    <label htmlFor=\"date\">Filter by date</label>\r\n                    <input onChange={toggleSortByDate} type=\"checkbox\" id=\"dateCheckBox\" name=\"date\" value=\"date\"></input>\r\n                </section>\r\n                <section className=\"completedTodosHeaderSection\">\r\n                    <h4>Title</h4>\r\n                    <h4>Author</h4>\r\n                    <h4>Description</h4>\r\n                    <h4>Completed date</h4>\r\n                </section>\r\n            </section>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                value={searchTerm}\r\n                onChange={handleChange} />\r\n            <ul className=\"completedTodosListSection\" id=\"completedTodosListSectionID\">\r\n                {listToMap.map((card) => (\r\n                    <li key={card.id}>\r\n                        <p>{card.title}</p>\r\n                        <p>{card.author}</p>\r\n                        <p>{card.description}</p>\r\n                        <p>{card.dateCreated}</p>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);"],"sourceRoot":""}